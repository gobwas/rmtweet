// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package twitter

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for in.Ok() && !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "id_str":
			out.IDStr = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "screen_name":
			out.ScreenName = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter(l, v)
}
func easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter1(in *jlexer.Lexer, out *Tweets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Tweets, 0, 1)
			} else {
				*out = Tweets{}
			}
		} else {
			*out = (*out)[:0]
		}
		for in.Ok() && !in.IsDelim(']') {
			var v1 Tweet
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter1(out *jwriter.Writer, in Tweets) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Tweets) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tweets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tweets) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tweets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter1(l, v)
}
func easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter2(in *jlexer.Lexer, out *Tweet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for in.Ok() && !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "created_at":
			out.CreatedAt = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "truncated":
			out.Truncated = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "lang":
			out.Lang = string(in.String())
		case "retweeted":
			out.Retweeted = bool(in.Bool())
		case "in_reply_to_status_id":
			out.InReplyToStatusID = int64(in.Int64())
		case "in_reply_to_user_id":
			out.InReplyToUserID = int64(in.Int64())
		case "in_reply_to_screen_name":
			out.InReplyToScreenName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter2(out *jwriter.Writer, in Tweet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix[1:])
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Truncated))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"retweeted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Retweeted))
	}
	{
		const prefix string = ",\"in_reply_to_status_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.InReplyToStatusID))
	}
	{
		const prefix string = ",\"in_reply_to_user_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.InReplyToUserID))
	}
	{
		const prefix string = ",\"in_reply_to_screen_name\":"
		out.RawString(prefix)
		out.String(string(in.InReplyToScreenName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tweet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tweet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tweet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tweet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter2(l, v)
}
func easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter3(in *jlexer.Lexer, out *ErrorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for in.Ok() && !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]ErrorInfo, 0, 2)
					} else {
						out.Errors = []ErrorInfo{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for in.Ok() && !in.IsDelim(']') {
					var v4 ErrorInfo
					(v4).UnmarshalEasyJSON(in)
					out.Errors = append(out.Errors, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter3(out *jwriter.Writer, in ErrorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"errors\":"
		out.RawString(prefix[1:])
		if in.Errors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Errors {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter3(l, v)
}
func easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter4(in *jlexer.Lexer, out *ErrorInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for in.Ok() && !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter4(out *jwriter.Writer, in ErrorInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComGobwasRmtweetTwitter4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComGobwasRmtweetTwitter4(l, v)
}
